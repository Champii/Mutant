#!/bin/bash

# Cross-platform setup script for MutAnt project
# This script detects the platform and runs the appropriate setup script

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

show_help() {
    echo "MutAnt Project Setup Script"
    echo ""
    echo "This script automatically detects your platform and runs the appropriate setup."
    echo ""
    echo "Usage: ./setup [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --skip-tests    Skip running tests"
    echo "  --skip-web      Skip web dependencies setup"
    echo "  --skip-ant      Skip Autonomi CLI installation"
    echo "  --help, -h      Show this help message"
    echo ""
    echo "Platform-specific scripts:"
    echo "  Linux/macOS: ./setup.sh"
    echo "  Windows:     .\setup.ps1"
    echo ""
}

main() {
    # Check for help flag
    for arg in "$@"; do
        if [[ "$arg" == "--help" ]] || [[ "$arg" == "-h" ]]; then
            show_help
            exit 0
        fi
    done
    
    log_info "MutAnt Project Setup - Platform Detection"
    
    # Detect platform and run appropriate script
    if [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]] || [[ -n "$WINDIR" ]]; then
        log_info "Windows detected - running PowerShell setup script"
        
        # Check if PowerShell is available
        if command -v powershell &> /dev/null; then
            # Convert arguments for PowerShell
            PS_ARGS=""
            for arg in "$@"; do
                case $arg in
                    --skip-tests)
                        PS_ARGS="$PS_ARGS -SkipTests"
                        ;;
                    --skip-web)
                        PS_ARGS="$PS_ARGS -SkipWeb"
                        ;;
                    --skip-ant)
                        PS_ARGS="$PS_ARGS -SkipAnt"
                        ;;
                esac
            done
            
            powershell -ExecutionPolicy Bypass -File setup.ps1 $PS_ARGS
        else
            log_error "PowerShell not found. Please install PowerShell or run setup.ps1 manually."
            exit 1
        fi
        
    elif [[ "$OSTYPE" == "linux-gnu"* ]] || [[ "$OSTYPE" == "darwin"* ]]; then
        log_info "Unix-like system detected - running bash setup script"
        
        # Make sure the script is executable
        chmod +x setup.sh
        
        # Run the bash setup script with all arguments
        ./setup.sh "$@"
        
    else
        log_error "Unsupported platform: $OSTYPE"
        log_info "Please run the appropriate setup script manually:"
        log_info "  - Linux/macOS: ./setup.sh"
        log_info "  - Windows: .\\setup.ps1"
        exit 1
    fi
    
    log_success "Platform-specific setup completed!"
}

main "$@"
